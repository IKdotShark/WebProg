import gulp from "gulp";
import paths from "./gulp/config/paths.js";
import plugins from "./gulp/config/plugins.js";
import server from "./gulp/tasks/server.js";
import cleanDist from "./gulp/tasks/cleanDist.js";
import html from "./gulp/tasks/html.js";
import js from "./gulp/tasks/js.js";
import scss from "./gulp/tasks/scss.js";
import img from "./gulp/tasks/img.js";
import { ttf, otfToTtf, ttfToWoff, fonts } from "./gulp/tasks/fonts.js";
import files from "./gulp/tasks/files.js";

// глобальные переменные
global.app = {
  isBuild: process.argv.includes("--build"),
  isDev: !process.argv.includes("--build"),
  notify: plugins["gulp-notify"],
  paths: paths,
  gulp: gulp,
  plugins: plugins,
};

// таск для конвертации шрифтов
gulp.task("optimize", async function () {
  return gulp.series(ttf, otfToTtf, ttfToWoff);
});

// основные задачи
const mainTasks = gulp.parallel(files, html, scss, js, img, fonts);

function scssTask() {
  return gulp.src("src/scss/styles.scss")
    .pipe(global.app.notify({
      message: 'File <%= file.relative %> changed'
    }));
}

// Отдельная задача для mockData
function mockDataTask() {
  return gulp.src("src/js/mockData/*.js")
    .pipe(global.app.notify({
      message: 'File <%= file.relative %> in mockData changed'
    }));
}

// Отдельная задача для components
function componentsTask() {
  return gulp.src("src/js/ui/components/*.js")
    .pipe(global.app.notify({
      message: 'File <%= file.relative %> in ui/components changed'
    }));
}

// Отдельная задача для pages
function pagesTask() {
  return gulp.src("src/js/ui/pages/*.js")
    .pipe(global.app.notify({
      message: 'File <%= file.relative %> in ui/pages changed'
    }));
}

// Отдельная задача для templates
function templatesTask() {
  return gulp.src("src/js/ui/templates/*.js")
    .pipe(global.app.notify({
      message: 'File <%= file.relative %> in ui/templates changed'
    }));
}

// наблюдатели за сменой файлов для пересборки
function watcher() {
  gulp.watch(paths.watch.files, gulp.series(scssTask));
  gulp.watch(paths.watch.html, gulp.series(mockDataTask));
  gulp.watch(paths.watch.scss, gulp.series(componentsTask));
  gulp.watch(paths.watch.js, gulp.series(pagesTask));
  gulp.watch(paths.watch.img, gulp.series(templatesTask));
}

// сценарии
const dev = gulp.series(cleanDist, mainTasks, gulp.parallel(server, watcher));
const build = gulp.series(cleanDist, mainTasks);

gulp.task("default", dev);

export { dev, build };
